{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "ECEngine",
  "scopeName": "source.ecengine",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#identifiers"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.ecengine",
          "begin": "//",
          "end": "$",
          "patterns": [
            {
              "name": "meta.toc-list.banner.block.ecengine",
              "match": "(?i:(?<=^//\\s)(=|!).*$)"
            }
          ]
        },
        {
          "name": "comment.block.ecengine",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "name": "meta.toc-list.banner.block.ecengine",
              "match": "(?i:(?<=^/\\*\\s)(=|!).*(?=\\s*\\*/))"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.ecengine",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.ecengine",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.ecengine",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.ecengine",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.decimal.ecengine",
          "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.hex.ecengine",
          "match": "\\b0[xX][a-fA-F0-9]+\\b"
        },
        {
          "name": "constant.numeric.binary.ecengine",
          "match": "\\b0[bB][01]+\\b"
        },
        {
          "name": "constant.numeric.octal.ecengine",
          "match": "\\b0[oO][0-7]+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.ecengine",
          "match": "\\b(if|else|while|for|do|switch|case|default|break|continue|return|observe)\\b"
        },
        {
          "name": "keyword.operator.logical.ecengine",
          "match": "\\b(and|or|not|in|instanceof|typeof)\\b"
        },
        {
          "name": "storage.type.ecengine",
          "match": "\\b(var|let|const)\\b"
        },
        {
          "name": "storage.type.function.ecengine",
          "match": "\\b(function)\\b"
        },
        {
          "name": "constant.language.ecengine",
          "match": "\\b(true|false|null|undefined)\\b"
        },
        {
          "name": "support.function.console.ecengine",
          "match": "\\b(console)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.ecengine",
          "match": "(=|\\+=|-=|\\*=|/=|%=|\\|=|&=|\\^=|<<=|>>=|>>>=)"
        },
        {
          "name": "keyword.operator.comparison.ecengine",
          "match": "(==|!=|===|!==|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.arithmetic.ecengine",
          "match": "(\\+|\\-|\\*|/|%|\\+\\+|\\-\\-)"
        },
        {
          "name": "keyword.operator.logical.ecengine",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.bitwise.ecengine",
          "match": "(&|\\||\\^|~|<<|>>|>>>)"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.ecengine",
          "begin": "\\b(function)\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\(",
          "beginCaptures": {
            "1": {
              "name": "storage.type.function.ecengine"
            },
            "2": {
              "name": "entity.name.function.ecengine"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        },
        {
          "name": "support.function.ecengine",
          "match": "\\b([a-zA-Z_$][a-zA-Z0-9_$]*)(?=\\s*\\()"
        }
      ]
    },
    "function-parameters": {
      "patterns": [
        {
          "name": "variable.parameter.ecengine",
          "match": "\\b[a-zA-Z_$][a-zA-Z0-9_$]*\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "meta.variable.declaration.ecengine",
          "begin": "\\b(var|let|const)\\s+",
          "beginCaptures": {
            "1": {
              "name": "storage.type.ecengine"
            }
          },
          "end": "(?=;|$|,)",
          "patterns": [
            {
              "name": "variable.other.readwrite.ecengine",
              "match": "\\b[a-zA-Z_$][a-zA-Z0-9_$]*\\b"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#numbers"
            }
          ]
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.property.ecengine",
          "match": "(?<=\\.)\\b[a-zA-Z_$][a-zA-Z0-9_$]*\\b"
        },
        {
          "name": "variable.other.readwrite.ecengine",
          "match": "\\b[a-zA-Z_$][a-zA-Z0-9_$]*\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.terminator.statement.ecengine",
          "match": ";"
        },
        {
          "name": "punctuation.separator.comma.ecengine",
          "match": ","
        },
        {
          "name": "punctuation.accessor.ecengine",
          "match": "\\."
        },
        {
          "name": "punctuation.definition.block.ecengine",
          "match": "[{}]"
        },
        {
          "name": "punctuation.definition.parameters.ecengine",
          "match": "[()]"
        },
        {
          "name": "punctuation.definition.array.ecengine",
          "match": "[\\[\\]]"
        }
      ]
    }
  }
}
